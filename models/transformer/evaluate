#!/usr/bin/env bash

set -euo pipefail

# Command line arguments & defaults.
EXPERIMENT_NAME=$1
MODE=$2
BEAM=$3
SEED=$4
EVAL_NAME=$5
DEFAULT_LANGS_FILE=""
LANGS_FILE=${6:-$DEFAULT_LANGS_FILE}
USE_CPU=${7:-no}

EXPERIMENT_FOLDER="$(pwd)/experiments/${EXPERIMENT_NAME}"
DATA_BIN_FOLDER="${EXPERIMENT_FOLDER}/binarized_data"
CHECKPOINT_FOLDER="${EXPERIMENT_FOLDER}/checkpoints"
EVAL_OUTPUT_FOLDER="${EXPERIMENT_FOLDER}/${EVAL_NAME}"

mkdir -vp $EVAL_OUTPUT_FOLDER

if [[ -z $BEAM ]]; then
	readonly BEAM=5
fi

RAW_DATA_FOLDER="${EXPERIMENT_FOLDER}/raw_data"

echo "DATA_BIN_FOLDER=${DATA_BIN_FOLDER}"
echo "CHECKPOINT_FOLDER=${CHECKPOINT_FOLDER}"
echo "MODE=${MODE}"
echo "BEAM=${BEAM}"
echo "SEED=${SEED}"
echo "RAW_DATA_FOLDER=${RAW_DATA_FOLDER}"
echo "USE_CPU=${USE_CPU}"

# Prediction options.

evaluate() {
	local -r DATA_BIN_FOLDER="$1"
	shift
	local -r EXPERIMENT_FOLDER="$1"
	shift
	local -r CHECKPOINT_FOLDER="$1"
	shift
	local -r MODE="$1"
	shift
	local -r BEAM_SIZE="$1"
	shift
	local -r SEED="$1"
	shift
    local -r USE_CPU="$1"
    shift

	echo "seed = ${SEED}"

	# Checkpoint file
	CHECKPOINT_FILE="${CHECKPOINT_FOLDER}/checkpoint_best.pt"
	if [[ ! -f "${CHECKPOINT_FILE}" ]]; then
		echo "${CHECKPOINT_FILE} not found. Changing..."
		CHECKPOINT_FILE="${CHECKPOINT_FILE/checkpoint_best/checkpoint_last}"
		echo "Changed checkpoint file to: ${CHECKPOINT_FILE}"
	fi

	# Fairseq insists on calling the dev-set "valid"; hack around this.
	local -r FAIRSEQ_MODE="${MODE/dev/valid}"

	OUT="${EVAL_OUTPUT_FOLDER}/${MODE}.out"
	SOURCE_TSV="${EVAL_OUTPUT_FOLDER}/${MODE}_with_source.tsv"
	SOURCE_LANGS_TSV="${EVAL_OUTPUT_FOLDER}/${MODE}_with_source_and_langs.tsv"
	GOLD="${EVAL_OUTPUT_FOLDER}/${MODE}.gold"
	HYPS="${EVAL_OUTPUT_FOLDER}/${MODE}.hyps"
	SOURCE="${EVAL_OUTPUT_FOLDER}/${MODE}.source"
	LANGS="${EVAL_OUTPUT_FOLDER}/${MODE}.languages"
	SCORE="${EVAL_OUTPUT_FOLDER}/${MODE}.eval.score"
    SCORE_TSV="${EVAL_OUTPUT_FOLDER}/${MODE}_eval_results.tsv"

	echo "Evaluating into ${OUT}"

	# Make raw predictions
    fairseq-generate \
        "${DATA_BIN_FOLDER}" \
        $([ "${USE_CPU}" = "yes" ] && echo "--cpu" || echo "") \
        --source-lang="src" \
        --target-lang="tgt" \
        --path="${CHECKPOINT_FILE}" \
        --seed="${SEED}" \
        --gen-subset="${FAIRSEQ_MODE}" \
        --beam="${BEAM_SIZE}" \
        --no-progress-bar | tee "${OUT}"

	# Also separate gold/system output/source into separate text files
    # (Sort by index to ensure output is in the same order as plain text data)
	cat "${OUT}" | grep '^T-' | sed "s/^T-//g" | sort -k1 -n | cut -f2 >"${GOLD}"
	cat "${OUT}" | grep '^H-' | sed "s/^H-//g" | sort -k1 -n | cut -f3 >"${HYPS}"
	cat "${OUT}" | grep '^S-' | sed "s/^S-//g" | sort -k1 -n | cut -f2 >"${SOURCE}"
    
    if [ -z "$LANGS_FILE" ]
    then
        echo "Inferring languages from Fairseq output"
        cat "${OUT}" | grep '^S-' | cut -f2 | grep -P -o "^<.*>" | cut -f1 -d' ' | tr -d '<>' >"${LANGS}"
    else
        echo "Outputting languages from ${LANGS_FILE} if needed"
        cat "${LANGS_FILE}" > "${LANGS}.tmp"
        [ -e "${LANGS}" ] && echo "Backing up existing file: ${LANGS}" && cp ${LANGS} ${LANGS}.bak
        mv "${LANGS}.tmp" "${LANGS}"
    fi
    paste "${GOLD}" "${HYPS}" "${SOURCE}" > "${SOURCE_TSV}"
    paste "${SOURCE_TSV}" "${LANGS}" > "${SOURCE_LANGS_TSV}"

	# Compute some evaluation metrics
	python scripts/evaluate.py \
		--references-path "${GOLD}" \
		--hypotheses-path "${HYPS}" \
        --languages-path "${LANGS}" \
		--source-path "${SOURCE}" \
		--score-output-path "${SCORE}"

	python scripts/evaluate.py \
        --tsv "${SOURCE_LANGS_TSV}" \
		--score-output-path "${SCORE_TSV}" \
        --output-as-tsv

	# Finally output the score so Guild.ai grab it
	cat "${SCORE}"
}

evaluate "${DATA_BIN_FOLDER}" "${EXPERIMENT_FOLDER}" "${CHECKPOINT_FOLDER}" "${MODE}" "${BEAM}" "${SEED}" "${USE_CPU}"
